const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Chargement des images
const backgroundImage = new Image();
const tataLeleImage = new Image();

backgroundImage.src = 'background_christmas.png';  // Chemin de l'image de fond
tataLeleImage.src = 'tata_lele.png';  // Chemin de l'image de l'h√©ro√Øne

// Chargement de la musique
const backgroundMusic = new Audio('background_music.mp3');
backgroundMusic.loop = true; // R√©p√©ter la musique en boucle
let isMusicPlaying = false; // L'√©tat initial de la musique (d√©marre en pause)

// Bouton pour activer/d√©sactiver la musique
const toggleMusicButton = document.getElementById('toggleMusic');
toggleMusicButton.addEventListener('click', () => {
    if (isMusicPlaying) {
        backgroundMusic.pause(); // Mettre en pause la musique
        toggleMusicButton.textContent = 'üîä'; // Ic√¥ne son activ√©
    } else {
        backgroundMusic.play().catch(error => {
            console.error('Erreur lors de la lecture de la musique :', error);
        });
        toggleMusicButton.textContent = 'üîá'; // Ic√¥ne son coup√©
    }
    isMusicPlaying = !isMusicPlaying; // Alterner l'√©tat
});

// Demander une interaction de l'utilisateur pour d√©marrer la musique
window.addEventListener('click', () => {
    if (!isMusicPlaying) {
        backgroundMusic.play().catch(error => {
            console.error('Erreur lors de la lecture automatique de la musique :', error);
        });
        toggleMusicButton.textContent = 'üîá'; // Ic√¥ne son coup√©
        isMusicPlaying = true; // Marquer la musique comme jou√©e
    }
});

// V√©rification du chargement de la musique
backgroundMusic.addEventListener('canplay', () => {
    console.log('Musique de fond charg√©e.');
});

// Variables pour le dialogue et les choix
let currentDialogueIndex = 0;
let dialogues = [
    "HO HO HO Tata L√©l√©, j'imagine que tu es pr√™te √† recevoir ton cadeau,que voudrais-tu pour No√´l ?",
    "Que voudrais-tu pour No√´l ?"
];

let choices = [
    "Un massage par EL FAMOSO Richard (dans la limite de 60 ‚Ç¨ bien √©videmment pour ne pas que les autres se sentent l√©s√©s, petite maligne).",
    "Rien, j'ai d√©j√† ce qu'il me faut, ma vie est merveilleuse."
];

let responses = [
    "Excellent choix, va voir ton Secret Santa (si tu sais qui c'est) pour lui donner tes disponibili√©s sur Chartres. Et surtout, joyeux No√´l !",
    "Ho ho ho, Tu n'as pas honte d'√©taler ton bonheur comme √ßa  et heureusement que tout le monde ne r√©agit pas comme toi, tu veux la mort du petit commerce ou quoi ? Mais bon, joyeux No√´l quand m√™me."
];

let selectedChoice = 0;
let isChoosing = false;
let isFinalMessage = false;
let showingResponse = false;

// Fonction pour redimensionner dynamiquement le canvas
function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Redessiner en fonction de l'√©tat actuel
    if (isChoosing) {
        drawChoices();
    } else if (showingResponse) {
        makeChoice();
    } else if (isFinalMessage) {
        drawFinalMessage();
    } else {
        drawDialogue();
    }
}

// Dessiner le fond sans le redimensionner de mani√®re disproportionn√©e
function drawBackground() {
    const imgRatio = backgroundImage.width / backgroundImage.height;
    const canvasRatio = canvas.width / canvas.height;

    if (canvasRatio > imgRatio) {
        const newHeight = canvas.width / imgRatio;
        ctx.drawImage(backgroundImage, 0, (canvas.height - newHeight) / 2, canvas.width, newHeight);
    } else {
        const newWidth = canvas.height * imgRatio;
        ctx.drawImage(backgroundImage, (canvas.width - newWidth) / 2, 0, newWidth, canvas.height);
    }
}

// Dessiner Tata L√©l√©
function drawTataLele() {
    const tataLeleWidth = 100;
    const tataLeleHeight = 200;
    const x = canvas.width / 2 - tataLeleWidth / 2;
    const y = canvas.height - tataLeleHeight;
    ctx.drawImage(tataLeleImage, x, y, tataLeleWidth, tataLeleHeight);
}

// Fonction pour afficher le dialogue
function drawDialogue() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawTataLele();

    // R√©initialiser les propri√©t√©s du contexte
    ctx.textAlign = 'left';
    ctx.font = '16px "Press Start 2P"';

    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(10, 10, canvas.width - 20, 150); // Bo√Æte de dialogue
    ctx.fillStyle = '#fff';
    wrapText(ctx, dialogues[currentDialogueIndex], 20, 50, canvas.width - 40, 20);
}

// Fonction pour afficher les choix
function drawChoices() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawTataLele();

    // R√©initialiser les propri√©t√©s du contexte
    ctx.textAlign = 'left';
    ctx.font = '16px "Press Start 2P"';

    const choiceBoxHeight = 60;
    const choiceBoxWidth = canvas.width - 20;
    const choiceBoxYStart = canvas.height - 160;

    for (let i = 0; i < choices.length; i++) {
        const choiceBoxY = choiceBoxYStart + (i * choiceBoxHeight);
        ctx.fillStyle = (i === selectedChoice) ? 'rgba(102, 204, 102, 0.7)' : 'rgba(0, 0, 0, 1)';
        ctx.fillRect(10, choiceBoxY, choiceBoxWidth, choiceBoxHeight);
        ctx.fillStyle = '#ff0000';
        wrapText(ctx, choices[i], 20, choiceBoxY + 20, canvas.width - 40, 20);
    }

    ctx.fillStyle = '#f00';
    ctx.fillText('‚Üí', 10, canvas.height - 115 + (selectedChoice * 60));
}

// Fonction pour afficher une r√©ponse apr√®s un choix
function makeChoice() {
    isChoosing = false;
    showingResponse = true;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawTataLele();

    // R√©initialiser les propri√©t√©s du contexte
    ctx.textAlign = 'left';
    ctx.font = '16px "Press Start 2P"';

    ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
    ctx.fillRect(10, 10, canvas.width - 20, 150);
    ctx.fillStyle = '#fff';
    wrapText(ctx, responses[selectedChoice], 20, 50, canvas.width - 40, 20);
}

// Fonction pour afficher le message final
function drawFinalMessage() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawBackground();
    drawTataLele();
    
    // Message "JOYEUX NO√ãL"
    ctx.fillStyle = 'rgba(0, 0, 0, 1)';
    ctx.fillRect(10, canvas.height / 2 - 75, canvas.width - 20, 150);
    ctx.fillStyle = '#fff';
    ctx.font = '48px "Press Start 2P"';
    ctx.textAlign = 'center';
    wrapText(ctx, 'JOYEUX NO√ãL TATA L√âL√â', canvas.width / 2, canvas.height / 2 - 24, canvas.width - 40, 48);
    
    // Bouton de red√©marrage
    ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';
    ctx.fillRect(canvas.width / 2 - 100, canvas.height / 2 + 100, 200, 50);
    ctx.fillStyle = '#fff';
    ctx.font = '16px "Press Start 2P"';
    ctx.fillText('RECOMMENCER', canvas.width / 2, canvas.height / 2 + 130);
}

// Fonction pour red√©marrer le jeu
function restartGame() {
    // R√©initialiser toutes les variables
    currentDialogueIndex = 0;
    selectedChoice = 0;
    isChoosing = false;
    isFinalMessage = false;
    showingResponse = false;
    
    // R√©initialiser les propri√©t√©s du contexte
    ctx.textAlign = 'left';
    ctx.font = '16px "Press Start 2P"';
    
    // Redessiner le dialogue initial
    drawDialogue();
}

// Fonction pour afficher du texte avec retour √† la ligne
function wrapText(context, text, x, y, maxWidth, lineHeight) {
    let words = text.split(' ');
    let line = '';

    for (let n = 0; n < words.length; n++) {
        let testLine = line + words[n] + ' ';
        let metrics = context.measureText(testLine);
        let testWidth = metrics.width;
        if (testWidth > maxWidth && n > 0) {
            context.fillText(line, x, y);
            line = words[n] + ' ';
            y += lineHeight;
        } else {
            line = testLine;
        }
    }
    context.fillText(line, x, y);
}

// Gestion des √©v√©nements clavier (PC)
document.addEventListener('keydown', (event) => {
    if (event.code === 'Space') {
        if (isChoosing) {
            makeChoice();
        } else if (showingResponse) {
            drawFinalMessage();
            showingResponse = false;
            isFinalMessage = true;
        } else if (!isFinalMessage) {
            advanceDialogue();
        }
    } else if (event.code === 'ArrowUp' && isChoosing) {
        selectedChoice = (selectedChoice > 0) ? selectedChoice - 1 : choices.length - 1;
        drawChoices();
    } else if (event.code === 'ArrowDown' && isChoosing) {
        selectedChoice = (selectedChoice < choices.length - 1) ? selectedChoice + 1 : 0;
        drawChoices();
    }
});

// Gestion des √©v√©nements souris et tactiles
canvas.addEventListener('click', (event) => {
    if (isFinalMessage) {
        const rect = canvas.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        
        // V√©rifier si le clic est sur le bouton de red√©marrage
        if (x >= canvas.width / 2 - 100 &&
            x <= canvas.width / 2 + 100 &&
            y >= canvas.height / 2 + 100 &&
            y <= canvas.height / 2 + 150) {
            restartGame();
        }
    }
});

canvas.addEventListener('touchstart', (event) => {
    const touch = event.touches[0];
    const rect = canvas.getBoundingClientRect();
    const x = touch.clientX - rect.left;
    const y = touch.clientY - rect.top;

    if (isFinalMessage) {
        // V√©rifier si le toucher est sur le bouton de red√©marrage
        if (x >= canvas.width / 2 - 100 &&
            x <= canvas.width / 2 + 100 &&
            y >= canvas.height / 2 + 100 &&
            y <= canvas.height / 2 + 150) {
            restartGame();
            return;
        }
    }
    
    if (isChoosing) {
        const choiceBoxHeight = 60;
        const choiceBoxYStart = canvas.height - 160;
        for (let i = 0; i < choices.length; i++) {
            const choiceBoxY = choiceBoxYStart + (i * choiceBoxHeight);
            if (y > choiceBoxY && y < choiceBoxY + choiceBoxHeight) {
                selectedChoice = i;
                makeChoice();
                return;
            }
        }
    } else if (showingResponse) {
        drawFinalMessage();
        showingResponse = false;
        isFinalMessage = true;
    } else if (!isFinalMessage) {
        advanceDialogue();
    }
});

// Fonction pour g√©rer les dialogues
function advanceDialogue() {
    if (currentDialogueIndex < dialogues.length - 1) {
        currentDialogueIndex++;
        if (currentDialogueIndex === dialogues.length - 1) {
            isChoosing = true;
            drawChoices();
        } else {
            drawDialogue();
        }
    }
}

// Lancer les dialogues au chargement des images
backgroundImage.onload = () => {
    resizeCanvas();
    drawDialogue();
};

// Redimensionner au chargement initial
resizeCanvas();
window.addEventListener('resize', resizeCanvas);